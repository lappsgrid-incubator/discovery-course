#!/bin/bash

# Copyright 2015 The Language Application Grid.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Script used to start all the containers used in the LAPPS Grid Galaxy appliance.

# Tomcat log file location.
LOG=/var/log/tomcat7/catalina.out

# Change this to the Gigaword installation directory. Comment this line out
# if you don't have Gigaword installed on your local machine.
#GIGAWORD_VOLUME="-v /mnt/sda1/var/lib/gigaword:/gigaword"
#GIGAWORD_VOLUME="-v /Users/suderman/corpora/gigaword:/gigaword"
#GIGAWORD_VOLUME="-v /var/local/corpora/hostage:/gigaword"
#GALAXY_VOLUME="-v /var/local/galaxy:/export"
GIGAWORD_VOLUME="-v /Users/suderman/docker/hostage:/gigaword"
GALAXY_VOLUME="-v /Users/suderman/docker/galaxy"

# The Docker executable.  This is the default location, if you mave moved the
# docker executable to a different location you will need to update this as well.
DOCKER=docker

# The list of containers needed to provide the standalone LAPPS Grid appliance.
# The order of the containers is important as this is the order they will be 
# created and startup will fail if a container attempts to link to a
# container that has not been started yet.
CONTAINERS="vassar brandeis evaluation gigaword manager galaxy"
if [ -z "$GIGAWORD_VOLUME" ] ; then
    CONTAINERS=$(echo $CONTAINERS | sed 's/gigaword //')
fi

# All containers minus gigaword.
#NO_GIGAWORD=$(echo $ALL_CONTAINERS | sed 's/gigaword //')

if [ -z "$IP" ] ; then
    if [  -z "$DOCKER_HOST" ] ; then
        IP=192.168.99.100
    else
        IP=$(echo $DOCKER_HOST | cut -d: -f2 | sed 's|/||g')
    fi
fi

# The Docker image names for all of the services.
BRANDEIS=lappsgrid/brandeis
EVALUATION=lappsgrid/evaluation
GALAXY=lappsgrid/galaxy-discovery
GIGAWORD=lappsgrid/gigaword
MANAGER=lappsgrid/service-manager
VASSAR=lappsgrid/vassar

# Ports used by the services.
GALAXY_PORT=80
VASSAR_PORT=8001
BRANDEIS_PORT=8002
GIGAWORD_PORT=8003
OAQA_PORT=8004
MANAGER_PORT=8080

# ANSI color codes for the console.
reset="\033[0m"
bold="\033[1m"
white="\033[97m"
red="\033[31m"
cyan="\033[36m"
green="\033[32m"
blue="\033[34m"
yellow="\033[33m"

# Function used to highlight text.
function hi() {
    echo -e "$bold$1$reset"
}

function usage() {
    echo "$(hi NAME) lappsgrid - the LAPPS Grid appliance startup script."
    echo
    echo "$(hi USAGE)"
    echo "    lappsgrid [run|start|stop|rm|pull]"
    echo
    echo "$(hi SYNOPSIS)"
    echo
    echo "    This script can be used to start the Docker containers that"
    echo "    make up the standalone LAPPS Grid appliance."
    echo 
    echo "$(hi COMMANDS)"
    echo
    echo "    $(hi run)"
    echo "        Run all the containers required by the appliance. The containers"
    echo "        must not already exist.  If the containers exist either delete"
    echo "        them before re-running them, or use the $(hi start) command to"
    echo "        re-start them."
    echo
    echo "    $(hi stop)"
    echo "        Stops all running containers.  The containers may be restarted"
    echo "        with the $(hi start)' command."
    echo
    echo "    $(hi kill)"
    echo "        Stops and removes all running containers. The appliance must"
    echo "        be restarted with the $(hi run) command."
    echo
    echo "    $(hi rm)"
    echo "        Remove all containers.  The containers must not be running."
    echo
    echo "    $(hi start)"
    echo "        Restart all stopped container."
    echo
    echo "    $(hi restart)"
    echo "        Stops and removes all running containers before re-running"
    echo "        them."
    echo
    echo "    $(hi pull) [<image> ...]"
    echo "        Pulls containers from the Docker hub. If no image name is given"
    echo "        all images required for the LAPPS Grid appliance will be pulled"
    echo "        from the Docker hub."
    echo "        Image names can be specified in full (i.e. lappsgrid/galaxy:cmu)"
    echo "        or a short name may be used: $(hi brandeis), $(hi galaxy), $(hi gigaword),"
    echo "        $(hi manager), $(hi oaqa), or $(hi vassar)."
    echo
    echo "    $(hi clean)"
    echo "        Removes the Galaxy data from the VM virtual disk. The image $(hi 'must not')"
    echo "        be running. This is recommended before running a new Galaxy docker"
    echo "        container so Galaxy does not use information cached from the"
    echo "        previous container."
    echo
    echo "    $(hi open) [ galaxy | manager | vassar | brandeis]"
    echo "        Opens the given application in the default web browswer." 
    echo
    echo "    $(hi help)"
    echo "        Displays this help screen."
    echo
    echo "Press the $(hi Q) key to exit this help screen."
    echo
}

function print_ports() {
    echo "The applications should be available at the following addresses"
    echo "Galaxy          : http://$IP:$GALAXY_PORT"
    echo "Vassar Tomcat   : http://$IP:$VASSAR_PORT/manager/html"
    echo "Brandeis Tomcat : http://$IP:$BRANDEIS_PORT/manager/html"
    echo "Gigaword Tomcat : http://$IP:$GIGAWORD_PORT/manager/html"
    echo "OAQA Evaluation : http://$IP:$OAQA_PORT/manager/html"
    echo "Service Manager : http://$IP:$MANAGER_PORT/service_manager"
    echo
}

function define_images() {
    if [ -n "$1" ] ; then
        BRANDEIS=lappsgrid/brandeis:$1
        EVALUATION=lappsgrid/evaluation:$1
        GALAXY=lappsgrid/galaxy:$1
        GIGAWORD=lappsgrid/gigaword:$1
        MANAGER=lappsgrid/service-manager:$1
        VASSAR=lappsgrid/vassar:$1
    fi
}

function get_image() {
    local result=$1
    case $1 in
        vassar)     result=$VASSAR ;;
        brandeis)   result=$BRANDEIS ;;
        gigaword)   result=$GIGAWORD ;;
        oaqa)       result=$EVALUATION ;;
        evaluation) result=$EVALUATION ;;
        galaxy)     result=$GALAXY ;;
        manager)    result=$MANAGER ;;
    esac
    echo $result
}

function run_all() {
    define_images $1
    echo "Starting Vassar image $VASSAR"
    $DOCKER run -d --name vassar -p $VASSAR_PORT:8080 $VASSAR
    echo "Starting Brandeis image $BRANDEIS"
    $DOCKER run -d --name brandeis -p $BRANDEIS_PORT:8080 $BRANDEIS

    if [ -n "$GIGAWORD_VOLUME" ] ; then
        echo "Starting $GIGAWORD"
        $DOCKER run -d --name gigaword -p $GIGAWORD_PORT:8080 $GIGAWORD_VOLUME $GIGAWORD
    fi

    echo "Starting $EVALUATION"
    $DOCKER run -d --name evaluation -p $OAQA_PORT:8080 $EVALUATION

    echo "Waiting for the Vassar Tomcat instance."      
    $DOCKER exec vassar waitforstart
    echo "Waiting for the Brandeis Tomcat instance."        
    $DOCKER exec brandeis waitforstart

    echo "Starting $MANAGER"
    $DOCKER run -d --name manager -p $MANAGER_PORT:8080 --link vassar --link brandeis --link evaluation $MANAGER

    echo "Starting $GALAXY"
    $DOCKER run -d --name galaxy -p $GALAXY_PORT:80 $GALAXY_LINKS $GALAXY_VOLUME $GALAXY

    print_ports
    echo
    echo "NOTE: It may take a few minutes for Docker to completely spin up all containers. Please be patient."
}

function echo_all() {
    define_images $1
    DOCKER=docker

    echo "$DOCKER run -d --name vassar -p $VASSAR_PORT:8080 $VASSAR"
    echo "$DOCKER run -d --name brandeis -p $BRANDEIS_PORT:8080 $BRANDEIS"

    #echo "#> $DOCKER run -d --name gigaword -p $GIGAWORD_PORT:8080 $GIGAWORD_VOLUME $GIGAWORD"
    echo "$DOCKER run -d --name evaluation -p $OAQA_PORT:8080 $EVALUATION"
    echo "## Pause here."
    #echo "$DOCKER exec vassar waitforstart"
    #echo "$DOCKER exec brandeis waitforstart"
    echo "$DOCKER run -d --name manager -p $MANAGER_PORT:8080 --link vassar --link brandeis --link evaluation $MANAGER"
    echo "$DOCKER run -d --name galaxy -p $GALAXY_PORT:80 $GALAXY_LINKS $GALAXY_VOLUME $GALAXY"
}

function kill_all() {
    for container in $CONTAINERS ; do
        echo "Stopping $container"
        $DOCKER stop $container
        echo "Removing $container"
        $DOCKER rm $container
    done
}

if [ -z "$1" ] ; then
    echo "ERROR: Missing command."
    echo "Expected one of $(hi run), $(hi start), $(hi stop), $(hi rm) or $(hi pull)."
    echo
    usage | less -R
    exit 1
fi

# Check if Gigaword is available and set the $CONTAINERS and
# $GALAXY_LINKS accordingly.
if [ -n "$GIGAWORD_VOLUME" ] ; then
    GALAXY_LINKS="--link manager --link gigaword --link evaluation --link vassar"
else
    GALAXY_LINKS="--link manager --link evaluation --link vassar"
fi

case $1 in
    echo)
        echo_all $2
        ;;
    run)
        run_all $2
        ;;
    start)      
        for container in $CONTAINERS ; do
            $DOCKER start $container
        done
        print_ports
        ;;
    stop)
        for container in $CONTAINERS ; do
            echo "Stopping $container"
            $DOCKER stop $container
        done
        ;;
    kill)
        kill_all
        ;;
    restart)
        kill_all
        run_all
        ;;
    rm)
        for container in $CONTAINERS ; do
            echo "Removing $container"
            $DOCKER rm $container
        done
        ;;
    pull)
        shift
        if [ -z "$1" ] ; then
            for name in $CONTAINERS ; do
                image=$(get_image $name)
                echo "Pulling $image"
                $DOCKER pull $image
            done
            exit 0
        fi
        if [ "$1" = "tag" ] ; then
            if [ -z "$2" ] ; then
                echo "No tag name specified."
                exit 1
            fi
            define_images $2
            for name in $CONTAINERS ; do
                image=$(get_image $name)
                echo "Pulling $image"
                $DOCKER pull $image
            done
            exit 0
        fi
        while [ -n "$1" ] ; do
            image=$(get_image $1)
            echo "Pulling $image"
            $DOCKER pull $image
            shift
        done
        ;;
    clean)
        docker-machine ssh default "sudo rm -rf /mnt/sda1/var/lib/galaxy"
        echo "Galaxy mount /mnt/sda1/var/lib/galaxy has been removed."
        docker-machine ssh default "ls -hal /mnt/sda1/var/lib"
        ;;
    open)
        case $2 in
            galaxy) open http://$IP:$GALAXY_PORT ;;
            manager) open http://$IP:$MANAGER_PORT/service_manager/news ;;
            vassar) open http://$IP:$VASSAR_PORT/manager/html ;;
            brandeis) open http://$IP:$BRANDEIS_PORT/manager/html ;;
            oaqa) open http://$IP:$OAQA_PORT/manager/html ;;
            gigaword) open http://$IP:$GIGAWORD_PORT/manager/html ;;
            *)
                echo "Unrecognized container: $2"
                ;;
        esac
        ;;
    help)
        usage | less -R
        ;;
esac